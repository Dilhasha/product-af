/*
 * Copyright 2011 gitblit.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.gitblit.GitBlit
import com.gitblit.Keys
import com.gitblit.models.RepositoryModel
import com.gitblit.models.UserModel
import com.gitblit.utils.JGitUtils
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.revwalk.RevCommit
import org.eclipse.jgit.transport.ReceiveCommand
import org.eclipse.jgit.transport.ReceiveCommand.Result
import org.slf4j.Logger
import org.eclipse.jgit.api.CommitCommand
import java.io.FileInputStream
import java.security.KeyStore
import java.security.PrivateKey
import java.security.cert.Certificate
import java.io.File
import java.security.Signature
import java.security.SignatureException
import java.util.*
import org.apache.axiom.util.base64.Base64Utils
import com.nimbusds.jose.JWSAlgorithm
import com.nimbusds.jose.JWSHeader
import com.nimbusds.jose.JWSSigner
import com.nimbusds.jose.crypto.RSASSASigner
import com.nimbusds.jwt.JWTClaimsSet
import com.nimbusds.jwt.SignedJWT
import java.security.interfaces.RSAPrivateKey
/**
 * Sample Gitblit Post-Receive Hook: notifycommits
 *
 * The Post-Receive hook is executed AFTER the pushed commits have been applied
 * to the Git repository.  This is the appropriate point to trigger an
 * integration build or to send a notification.
 *
 * This script is only executed when pushing to *Gitblit*, not to other Git
 * tooling you may be using.
 *
 * If this script is specified in *groovy.postReceiveScripts* of gitblit.properties
 * or web.xml then it will be executed by any repository when it receives a
 * push.  If you choose to share your script then you may have to consider
 * tailoring control-flow based on repository access restrictions.
 *
 * Scripts may also be specified per-repository in the repository settings page.
 * Shared scripts will be excluded from this list of available scripts.
 *
 * This script is dynamically reloaded and it is executed within it's own
 * exception handler so it will not crash another script nor crash Gitblit.
 *
 * Bound Variables:
 *  gitblit			Gitblit Server	 			com.gitblit.GitBlit
 *  repository		Gitblit Repository			com.gitblit.models.RepositoryModel
 *  user			Gitblit User				com.gitblit.models.UserModel
 *  commands		JGit commands 				Collection<org.eclipse.jgit.transport.ReceiveCommand>
 *	url				Base url for Gitblit		String
 *  logger			Logs messages to Gitblit 	org.slf4j.Logger
 *  clientLogger	Logs messages to Git client	com.gitblit.utils.ClientLogger
 *
 * Accessing Gitblit Custom Fields:
 *   def myCustomField = repository.customFields.myCustomField
 *
 */
// Indicate we have started the script
logger.info("notifycommits hook triggered by ${user.username} for ${repository.name}")

// This script requires Jenkins Git plugin 1.1.14 or later
// http://kohsuke.org/2011/12/01/polling-must-die-triggering-jenkins-builds-from-a-git-hook/

// define your jenkins url here or set groovy.jenkinsServer in 
// gitblit.properties or web.xml

def tmpArr = repository.name.split("/")
def tmpAppNameArr = tmpArr[1].split(".git")
def appName = tmpAppNameArr[0]

def s = new HashSet()
def ref = new HashSet()
def newid = new HashSet()
def message = new HashSet()
Repository r = gitblit.getRepository(repository.name)

for (command in commands) {
    ref = command.refName
    def refType = 'branch'
    if (ref.startsWith('refs/heads/')) {
        ref  = command.refName.substring('refs/heads/'.length())
    } else if (ref.startsWith('refs/tags/')) {

        ref  = command.refName.substring('refs/tags/'.length())
        refType = 'tag'
    }

    def commits = JGitUtils.getRevLog(r, command.oldId.name, command.newId.name)

    for (RevCommit commit : commits) {
        message = commit.getFullMessage()
    }


    switch (command.type) {
        case ReceiveCommand.Type.CREATE:
            break
        case ReceiveCommand.Type.UPDATE:
            s<<ref
            break
        case ReceiveCommand.Type.UPDATE_NONFASTFORWARD:
            ss<<ref
            break
        case ReceiveCommand.Type.DELETE:

            break
        default:
            break
    }
}

// define the trigger url
def adminName = gitblit.getString('appfactory.gitblit.admin.username','').trim()
def userName = "${user.username}".trim()
if(!adminName.equals(userName)){
    for(branch in s){
        if(s.contains('master')){
            s = 'trunk'
        }
        else {
            s = ref;
        }
    }

    def signUtil = new SignUtil()

    def requestXML = "";
    requestXML="<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ser='http://service.mgt.repository.appfactory.carbon.wso2.org'>";
    requestXML+="   <soap:Body>";
    requestXML+="       <ser:notifyPostCommit>";
    requestXML+="         <ser:applicationKey>${appName}</ser:applicationKey>";
    requestXML+="         <ser:gitUserName>${user.username}</ser:gitUserName>";
    requestXML+="         <ser:branch>${s}</ser:branch>";
    requestXML+="         <ser:commitMessage>${message}</ser:commitMessage>";
    requestXML+="       </ser:notifyPostCommit>";
    requestXML+="   </soap:Body>";
    requestXML+="</soap:Envelope>";



    def curlCommand = "curl -k --trace-ascii debugdump.txt -X POST --data \""+requestXML+"\" -H \"Authorization: " + signUtil.getAuthHeader("${user.username}", gitblit) + "\" -H \"Content-Type:text/xml;Charset='UTF-8'\" -H SOAPAction:\"urn:notifyPostCommit\" https://<%= @af_subdomain %>.<%= @wso2_env_domain %>:<%= @af_port %>/services/RepositoryManagementService.RepositoryManagementServiceHttpsSoap11Endpoint";

    logger.info("Executing curl command :" + curlCommand);
    try{
        def ant = new AntBuilder();
        ant.exec(outputproperty:"cmdOut",
                 errorproperty: "cmdErr",
                 resultproperty:"cmdExit",
                 failonerror: "true",
                 executable: 'curl') {
            arg(line:curlCommand);
        }

    }catch(e){
        println e;
    }finally {
        // close the repository reference
        r.close()
    }
}

class SignUtil {
    def getAuthHeader(username, gitblit){
        def keystoreName = gitblit.getString("appfactory.keystore","")
        def keystorecredential = gitblit.getString("appfactory.keystore.password","")
        KeyStore ks = KeyStore.getInstance("jks")
        ks.load(new FileInputStream(keystoreName), keystorecredential.toCharArray())
        PrivateKey key = (PrivateKey)ks.getKey(keystorecredential, keystorecredential.toCharArray())
        JWSSigner signer = new RSASSASigner((RSAPrivateKey) key)
        JWTClaimsSet claimsSet = new JWTClaimsSet()
        claimsSet.setClaim("Username", username.trim())
        SignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.RS512), claimsSet)
        signedJWT.sign(signer)
        def header = "Bearer " + Base64Utils.encode(signedJWT.serialize().getBytes())
        return header
    }
}