<%
include("/jagg/jagg.jag");
(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result, username,
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action"),
            user = jagg.getUser();
    if (action == "getAllSubscriptions") {
        if (!user) {
            print({
                      error:true,
                      message:msg.error.loginRequired(action)
                  });
            return;
        }
        username = user.username;

        mod = jagg.module("subscription");
        result = mod.getAllSubscriptions(username);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                subscriptions:result.applications
            }
        }
        print(obj);
    }else if (action == "getSubscriptionByApplication") {
        var appname = request.getParameter("app");
        var username = request.getParameter("username");
        if (!user) {
            print({
                      error:true,
                      message:msg.error.loginRequired(action)
                  });
            return;
        }
        if(username == null){
            username = user.username;
        }else{
            var externalUserDomain = username.split("@")[1];
            var loggedInUserDomain = user.username.split("@")[1];
            if(externalUserDomain.trim() != loggedInUserDomain.trim()){
                obj = {
                    error:true,
                    apis:"Logged in user and requested user are from different domains"
                }
                return;
            }
        }

        mod = jagg.module("subscription");
        result = mod.getAPISubscriptionsForApplication(username,appname);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                apis:result.subscriptions
            }
        }
        print(obj);
    }else {
        print({
                  error:true,
                  message:msg.error.invalidAction(action)
              });
    }
}());
%>
