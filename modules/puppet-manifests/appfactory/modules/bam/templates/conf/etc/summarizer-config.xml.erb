<!--
 ~ Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->

<!--
    This is the configuration file for logging specific properties.
-->

<loggingConfig xmlns="http://wso2.org/projects/carbon/carbon.xml">
  <isDataFromCassandra>true</isDataFromCassandra>
  <deleteColFamily>true</deleteColFamily>	
  <!--Set the BAM Event publisher host url which specifies the log location where the logs are hosted-->
  <cassandraHost><%= @hector_nodes.join(",") %></cassandraHost>
  <userName><%= @cassandra_username %></userName>
  <password><%= @cassandra_password %></password>
  <cassandraConsistencyLevel>ONE</cassandraConsistencyLevel>
  <cassandraAutoDiscovery enable="false" delay="1000"/>
  <retryDownedHosts enable="true" queueSize="10"/>
  <publisherURL>tcp://<%= @receiver1_url %>:<%= @receiver_port %></publisherURL>
  <publisherUser><%= @receiver_username %></publisherUser>
  <publisherPassword><%= @receiver_password %></publisherPassword>
  <!--Cron expression for daily 1:00 am Summary Generation-->
  <cronExpression>0 0 1 ? * * *</cronExpression> 
<!--	<cronExpression>1 * * * * ? *</cronExpression> -->
<!--	<cronExpression>0 25 9 * * ? *</cronExpression> -->
<!--	<logDirectory>/mnt/logs/</logDirectory>
  <tmpLogDirectory>/mnt/tmp-logs/</tmpLogDirectory>-->
  <hdfsConfig>hdfs://<%= @hdfs_url %>.<%= @wso2_env_domain %>:<%= @hdfs_port %></hdfsConfig>
  <archivedLogLocation>/stratos/archivedLogs/</archivedLogLocation>
  <bamUserName><%= @receiver_username %></bamUserName>
  <bamPassword><%= @receiver_password %></bamPassword>
	<hiveQuery>
    set logs_column_family = %s;
    set file_path= %s;

    set hive.exec.dynamic.partition=true;
    set hive.exec.dynamic.partition.mode=nonstrict;

    DROP table IF EXISTS LogStats;
    DROP table  IF EXISTS TempStats;
    DROP table IF EXISTS  DailyLogStats;

    CREATE EXTERNAL TABLE IF NOT EXISTS LogStats (key STRING,
    payload_tenantID STRING,payload_serverName STRING,
    payload_appName STRING,payload_message STRING,
    payload_stacktrace STRING,
    payload_logger STRING,
    payload_priority STRING,payload_logTime BIGINT) 
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' 
    WITH SERDEPROPERTIES ( "cassandra.host" = %s,
    "cassandra.port" = %s,"cassandra.ks.name" = %s,
    "cassandra.ks.username" = %s,"cassandra.ks.password" = %s,
    "cassandra.cf.name" = ${hiveconf:logs_column_family},
    "cassandra.columns.mapping" = 
    ":key,payload_tenantID,
    payload_serverName,payload_appName,payload_message,
    payload_stacktrace,payload_logger,payload_priority,
    payload_logTime" );

    CREATE EXTERNAL TABLE IF NOT EXISTS DailyLogStats (key STRING,
    payload_tenantID STRING,payload_serverName STRING,
    payload_appName STRING,payload_message STRING,
    payload_stacktrace STRING,
    payload_logger STRING,
    payload_priority STRING,payload_logTime BIGINT)
    STORED BY 'org.apache.hadoop.hive.cassandra.CassandraStorageHandler'
    WITH SERDEPROPERTIES ( "cassandra.host" = %s,
    "cassandra.port" = %s,"cassandra.ks.name" = %s,
    "cassandra.ks.username" = %s,"cassandra.ks.password" = %s,
    "cassandra.cf.name" = ${hiveconf:logs_column_family},
    "cassandra.columns.mapping" =
    ":key,payload_tenantID,
    payload_serverName,payload_appName,payload_message,
    payload_stacktrace,payload_logger,payload_priority,
    payload_logTime" );

    CREATE EXTERNAL TABLE IF NOT EXISTS LoginAnalytics (
    ID String,
    username STRING,
    tenantId INT,
    tenantDomain STRING,
    loginTime STRING)
    STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES (
    "mapred.jdbc.driver.class" = "com.mysql.jdbc.Driver",
    "wso2.carbon.datasource.name"="WSO2_CLOUD_MGT_STATS",
    "hive.jdbc.update.on.duplicate" = "true",
    "hive.jdbc.primary.key.fields" = "ID",
    "hive.jdbc.table.create.query" = "CREATE TABLE LoginAnalytics (
    ID VARCHAR(200) NOT NULL,
    username VARCHAR(200),
    tenantId INT,
    tenantDomain VARCHAR(100),
    loginTime TIMESTAMP)"
    );


    INSERT OVERWRITE  DIRECTORY 'hdfs:///${hiveconf:file_path}' 
    select 
    concat('TID: [',payload_tenantID,'] ',
    '[',payload_serverName,'] '),
    concat(' [',
    (from_unixtime(cast(payload_logTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),'] ') as LogTime, 
    concat(payload_priority, ' ',
    '{',payload_logger,'}', 
    ' - ',payload_message,' ',
    payload_appName,' ',
    payload_stacktrace) from LogStats
    ORDER BY LogTime;

    CREATE EXTERNAL TABLE IF NOT EXISTS TempStats(TID STRING,name STRING,
    payload_message STRING)
    PARTITIONED BY (payload_appName STRING) 
    ROW FORMAT DELIMITED 
    FIELDS TERMINATED BY '\001' 
    COLLECTION ITEMS TERMINATED BY '\002' 
    MAP KEYS TERMINATED BY '\003' 
    LINES TERMINATED BY '\012'
    STORED AS TEXTFILE
    LOCATION 'hdfs:///${hiveconf:file_path}';
    FROM DailyLogStats 

    INSERT OVERWRITE TABLE TempStats PARTITION(payload_appName)
    SELECT  concat('TID: [',payload_tenantID,'] ',
    '[',payload_serverName,'] '),
    concat(' [',
    (from_unixtime(cast(payload_logTime/1000 as BIGINT),'yyyy-MM-dd HH:mm:ss.SSS' )),'] ') as LogTime,
    concat(payload_priority, ' ',
    '{',payload_logger,'}',
    ' - ',payload_message,' ',
    payload_stacktrace),payload_appName
    ORDER BY LogTime;

    INSERT INTO TABLE LoginAnalytics
    SELECT  concat(regexp_extract(payload_message,"([\\w.%+\\-_]+@[A-Za-z0-9.%+\\-_]+[A-Za-z]{2,4})", 1), "_",
    regexp_replace(regexp_extract(payload_message,"(\\[-?\\d+\\])(.*\\[)(\\d[0-9\\-\\s:]+)(\\])", 3),"\\s" , "_")),
    regexp_extract(payload_message,"([\\w.%+\\-_]+@[A-Za-z0-9.%+\\-_]+[A-Za-z]{2,4})", 1) as username,
    regexp_extract(payload_message,"(.*\\[)(-?\\d+)(\\])", 2) as tenantid,
    regexp_extract(payload_message,"(.*@)([A-Za-z0-9.%+\\-_]+)", 2) as tenantDomain,
    regexp_extract(payload_message,"(.*\\[)([0-9\\-\\s,+:]+)(\\])", 2) as loginTime
    FROM LogStats
    WHERE payload_logger='org.wso2.carbon.cloud.utils.listeners.CloudUserOperationListener';
  </hiveQuery>
</loggingConfig>
