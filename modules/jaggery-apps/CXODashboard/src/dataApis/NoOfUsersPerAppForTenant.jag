<%
var userConfig = require('commons/userConfig.js');
var dbConfig = require('commons/dbConfig.js');
var util = require('commons/Util.js');
include("/constants.jag");

var isUserLoggedIn = userConfig.isUserLoggedIn();

var tenantID = userConfig.getTenantID();

var timePeriod = getTimePeriod();
var chartData = getData(timePeriod[0], timePeriod[1]);

function getTimePeriod() {

     if (isUserLoggedIn) {
         var result = [0, 0];
         if (request.getParameter(FROM) == null || request.getParameter(TO) == null) {

             var query = "SELECT MIN(ROUND(TIME_ST/1000)) AS min_time_st, MAX(ROUND(TIME_ST/1000)) AS max_time_st" +
                         " FROM LATEST_APP_USERS WHERE TENANT_ID=" + tenantID + " ;";
             var dbResult = dbConfig.queryDb(query);

             if (util.isValidDbResult(dbResult[0], ['min_time_st', 'max_time_st'])) {
                 result[0] = dbResult[0]['min_time_st'];
                 result[1] = dbResult[0]['max_time_st'];
             }
	    	
        } else {
            result[0] = request.getParameter(FROM);
            result[1] = request.getParameter(TO);
        }
        return result;
    }
}

function getData(from, to) {

    if (isUserLoggedIn) {

        var query = "SELECT APP_USER.APPLICATION_NAME AS APP, COUNT(*) as COUNT FROM APP_USER, LATEST_APP_USERS " +
                    "WHERE APP_USER.TIME_ST = LATEST_APP_USERS.TIME_ST AND APP_USER.APPLICATION_KEY = " +
                    "LATEST_APP_USERS.APPLICATION_KEY AND APP_USER.USER = LATEST_APP_USERS.USER AND APP_USER.ACTION != " +
                    "'DELETE' AND LATEST_APP_USERS.TENANT_ID=" + tenantID +
                    " AND ROUND(LATEST_APP_USERS.TIME_ST/1000) " +
                    "BETWEEN " + parseInt(from) + " AND " + parseInt(to) + " GROUP BY APP_USER.APPLICATION_NAME";
        var dbResult = dbConfig.queryDb(query);

        var respJson = null;
        var colx = "APP";
        var coly = "COUNT";
	
        respJson = convertDBResult(dbResult, colx, coly);
    
    	var data1 = [];
    	var ticks = [];
    	for (i = 0; i < respJson.length; i++) {
        	ticks.push([i+1, respJson[i][0]])
        	data1.push([i+1, respJson[i][1]]);
    	}

    	return {0:{"data": data1},1:{ "ticks": ticks}};

   }
}


    	function convertDBResult(result, colx, coly) {
			var array = [];
			for (var i = 0; i < result.length; i++) {
				array.push([result[i][colx],parseFloat(result[i][coly])]);
			}

			return array;
        };

var gen_options = require("config/bar-chart-option.json");
var full_data;

if (chartData != null) {
    gen_options["xaxis"]["min"] = 0.5;
    gen_options["xaxis"]["max"] = chartData[1].ticks.length > 10 ? 10.5 : chartData[1].ticks.length + 1;
    gen_options["xaxis"]["ticks"] = chartData[1].ticks;
    gen_options["xaxis"]["panRange"] = [0.5, chartData[1].ticks.length + 1];
    gen_options["yaxis"]["axisLabel"]= "Number of Team Members";
    gen_options["series"]["color"] = "#9966CC";
    gen_options["series"]["bars"]["fillColor"] = "#9999CC";
    full_data = {0: {"data": chartData[0].data}, 1: gen_options};
}
else {
    full_data = {0: {"data":""}, 1: gen_options};
}

var _full_data = stringify(full_data);
response.contentType = 'text/json';
print(_full_data);


%>
