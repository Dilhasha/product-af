<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/resources/apis/get/get.jag');

var modManager = jagg.module("manager");
var permissionModule = jagg.module("permission");

var getAPIsOfUserApp = function(appKey, appowner){
    var ws = require('ws');
    var apiManagerIntegration = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:getAPIsOfUserApp";
    options["HTTPHeaders"] = [
                              { name : "Cookie", value :modManager.getBackendCookie(getProperty(APPFACTORY_SERVER_URL)) },
                              { name : "username", value :session.get("LOGGED_IN_USER") },
                              { name : "SAMLToken" , value : session.get("SAML_TOKEN") }
                              ];

    var namespace = getProperty(API_MANAGER_SERVICE_NAMESPACE);
    var payload = '<int:getAPIsOfUserApp xmlns:int="' + namespace+ '"><int:applicationId>' + appKey + '</int:applicationId><int:appOwner>' + appowner + '</int:appOwner></int:getAPIsOfUserApp>';
    var result;

    try {
        var serviceName =getProperty(API_MANAGER_SERVICE_NAME);
        var serverUrl = getProperty(APPFACTORY_SERVER_URL);
        var endPoint = serverUrl + serviceName;
        apiManagerIntegration.open(options,endPoint, false);
        apiManagerIntegration.send(payload);
        result = apiManagerIntegration.responseE4X;

        if(log.isDebugEnabled()){
        	log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }
        var elements = result.*::["return"];
        var elementsArray = [];
        for(var i = 0; i < elements.length(); i++){
            var entry = elements[i];

            var apiInfo = {};
          	var apiName = entry.*::apiName.text();
          	var apiVersion = entry.*::apiVersion.text();
          	var apiProvider = entry.*::apiProvider.text();
          	var description = entry.*::description.text();
          	
          	apiInfo.name = apiName;
            apiInfo.version = apiVersion;
            apiInfo.provider = apiProvider;
            apiInfo.description = description;
           	elementsArray.push(apiInfo);
        }
        return elementsArray;

    } catch (e) {
        log.error("Error while getting the list of APIs of appKey "+ applicationKey + "\n"+ e.message);
        throw "Error while getting the list of APIs of appKey "+ applicationKey;
    }
}

%>
