<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log("modules/rss-filter.jag");
var modManager = jagg.module("manager");
var rssAdapter = Packages.org.wso2.carbon.appfactory.utilities.dbmgt.DataBaseMgtUtil;
var carbon = require('carbon');
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;
var addDatabase = function (databaseName, application, environment) {
if (log.isDebugEnabled()) {
        log.debug("Adding database info to RXT " + databaseName);
    }
    rssAdapter.addDatabase(databaseName, application, environment, modManager.getTenantDomain());
};
var addDatabaseUser = function (databaseUserName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database user info to RXT " + databaseUserName);
    }
    rssAdapter.addDatabaseUser(databaseUserName, application, environment, modManager.getTenantDomain());
};
var addDatabaseTemplate = function (databaseTemplateName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database template info to RXT " + databaseTemplateName);
    }
    rssAdapter.addDatabaseUserPermissionTemplate(databaseTemplateName, application, environment, modManager.getTenantDomain());
};
var getAllDatabases = function (application, environment, allDatabases) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all database info of " + application + " in " + environment);
    }
    var filteredDBs = [];
    //ToDo: What is the reason for this filtering???
    var names = rssAdapter.getAllDatabases(application, environment, modManager.getTenantDomain());
    if (log.isDebugEnabled()) {
        log.debug("Received database info from  RXT " + names);
    }
    for (var name in names) {

        for (var db in allDatabases) {

            if (names[name] == getTenantAwareDBName(allDatabases[db].dbName)) {
                filteredDBs.push(allDatabases[db]);
                if (log.isDebugEnabled()) {
                    log.debug("Filtered database " + names[name]);
                }

            }
        }
    }
    return filteredDBs;

};
var getAllDatabaseUsers = function (application, environment, allUsers) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all users of " + application + " in " + environment);
    }
    var userNames = rssAdapter.getAllDatabaseUsers(application, environment,
        modManager.getTenantDomain());
    var filteredUsers = [];
    for (var userName in userNames) {
       for(var user in allUsers){
        if (userNames[userName] == getTenantAwareUserName(allUsers[user].name)) {

            filteredUsers.push(allUsers[user]);
            if (log.isDebugEnabled()) {
                log.debug("Filtering user " + userNames[userName]);
            }
        }
      }
    }

return filteredUsers;
};

var isDatabaseUserExists = function (application, environment, user) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all users of " + application + " in " + environment);
    }
    var userNames = rssAdapter.getAllDatabaseUsers(application, environment,
        modManager.getTenantDomain());
    for (var userName in userNames) {
        if (userNames[userName] ==user) {
            return true;
        }
    }

    return false;
};
var getAllDatabaseTemplates = function (application, environment, allTemplates) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all template of " + application + " in " + environment);
    }
    var templateNames = rssAdapter.getAllDatabasePrivilegeTemplates(application, environment, modManager.getTenantDomain());
    var filteredTemplates = [];
    for (var templateName in templateNames) {

        for (var template in allTemplates) {
            if (templateNames[templateName] == getEnvironmentAwareTemplateName(allTemplates[template].name)) {

                filteredTemplates.push(allTemplates[template]);
                if (log.isDebugEnabled()) {
                    log.debug("Filtering template " + templateNames[templateName]);
                }
            }
        }
    }
    return filteredTemplates;
};
var deleteDatabase = function (databaseName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting db " + databaseName);
    }
    rssAdapter.deleteDatabase(databaseName, application, environment, modManager.getTenantDomain());
};
var deleteDatabaseUser = function (databaseUserName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting user " + databaseUserName);
    }
    rssAdapter.deleteDatabaseUser(databaseUserName, application, environment, modManager.getTenantDomain());
};
var deleteDatabaseTemplate = function (databaseTemplateName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting template " + databaseTemplateName);
    }
    rssAdapter.deleteDatabaseUserPermissionTemplate(databaseTemplateName, application, environment, modManager.getTenantDomain());
};

var getTenantAwareUserName = function (fullName) {
    return fullName.substr(0, fullName.lastIndexOf('_'));
};

var getTenantAwareDBName = function (fullName) {
    return fullName;
};
var getEnvironmentAwareTemplateName = function (fullName) {
    return fullName.substr(0, fullName.lastIndexOf('@')).replace('@','..');
};
%>
