<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

(function () {
    var mod, obj, result,
    action = request.getParameter("action"),
    site = require("/site/conf/site.json");
    var log=new Log();
    mod = jagg.module("resources");

    var modPermission = jagg.module("permission");
    if (action == "getExternalAPIs") {
    	
    	var applicationKey = request.getParameter("applicationKey");
        var response = {};
        var externalAPIs = {};
        var stages = getProperties(DEPLOYMENT_STAGES);
        for (var i = 0; i < stages.length; i++) {
        	var stage = stages[i];
    		if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_READ_FOR_STAGE + stage)){
    			var response = mod.getDetailedPropertyValuesInStages(applicationKey , [stage])[stage];
 	            for (var propIndex in response) {
 	                var property = response[propIndex];
 	           
 	                if (property.mediaType == "External API") {
 	                    var apiName = property.name;
 	                    var details = externalAPIs[apiName];
 	                    if(details == undefined ){
 	                    	details = [];
 	                    }
 	                    var detail = mod.getDetailedPropertyValuesInStages(applicationKey + "/" + apiName, [stage]);
 	                    details.push(detail);
 	                   externalAPIs[apiName] = details;
 	                }
 	            }
	        } else {
	            var msg = "You don't have permission to get External APIs for stage " +stage;
                log.error(msg);
	        }
        }
         print(externalAPIs);
    } else if (action == "getCreatePermittedEnvironments") {
        var permittedStages = [];
        var stages = getProperties(DEPLOYMENT_STAGES);
        for (var i = 0; i < stages.length; i++) {
        	var stage = stages[i];
    		if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_CREATE_FOR_STAGE + stage)){
    			permittedStages.push(stage);
	        } else {
	            var msg = "You don't have permission to create resources in stage " +stage;
                log.error(msg);
	        }
        }
         print(permittedStages);
    } else if (action == "getUpdatePermittedData") {
    	var applicationKey = request.getParameter("applicationKey");
    	var resourceName = request.getParameter("resourceName");
    	var data = [];
    	
        var stages = getProperties(DEPLOYMENT_STAGES);
	    for (var i = 0; i < stages.length; i++) {
	    	var stage = stages[i];
			if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_RESOURCES_UPDATE_FOR_STAGE + stage)){
				var externalAPI = {};
				var values = mod.getDetailedPropertyValuesInStages(applicationKey + "/" + resourceName, [stage]); 
				externalAPI['api_stage'] = stage;
				externalAPI['api_name'] = resourceName;
				
				// Empty check to avoid adding stages which has no apis/properties
				var isEmpty = true;
				for (var stageName in values) {
					var stageData = values[stageName];
					var properties = {};
					for (var propIndex in stageData) {
						isEmpty = false;
						var property = stageData[propIndex];
						if(property.name == 'authentication'){
							externalAPI['api_auth']= property.value;
						}
						else{
							externalAPI["api_" +property.name] = property.value;
						}
					}
				}
				
				if(!isEmpty){
					data.push(externalAPI);
				}
		    } else {
	            var msg = "You don't have permission to update resources in stage " +stage;
	            log.error(msg);
	        }
	    }   
	    print(data);
    } else {
        throw new Error("No action specified");
    }
}());
%>