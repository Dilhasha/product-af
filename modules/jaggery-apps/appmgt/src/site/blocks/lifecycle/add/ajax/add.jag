<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");

 	var log = new Log();
    var modPermission = jagg.module("permission");

    if (action == "deployToStage") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var revision = request.getParameter("revision");
    	var version = request.getParameter("version");
    	var stageName = request.getParameter("stageName");
    	var build = request.getParameter("build");
    	
        return mod.invokeDeployToStage(applicationKey,revision,version,stageName,build);
    } else if(action == "directdeploy") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var build = request.getParameter("build");

        var revision = "HEAD";
        var isDirectlyDeploy = getProperty('ApplicationDeployment.DeploymentStage.' + stageName + '.AllowDirectDeploy');
        var permissionStageToDeploy = PERMISSION_DEPLOY_TO + stageName;

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToDeploy)){
            if (isDirectlyDeploy == "true"){
                try{
                    mod.invokeDeployToStage(applicationKey,revision,version,stageName,build);
                } catch(e) {
                    throw new Error(e.message);
                }
            } else {
                log.info("Artifact is not configured for direct deploy");
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to deploy";
            print(response);
        }
	    
    } else if(action == "Promote" || action == "Demote" || action == "Retire") {
		mod = jagg.module("lifecycle");
	    log.info("promoting ..............");
	    	    
    	var applicationKey = request.getParameter("applicationKey");
    	var stageName = request.getParameter("stageName");
    	var version = request.getParameter("version");
		var tagName = request.getParameter("tagName");
		var comment = request.getParameter("comment");
		var userName = request.getParameter("userName");

	    var applicationModule = jagg.module("application");
		var currentStage = applicationModule.getStage(applicationKey,version);

        var response = {};
        var nextStage = mod.getNextLifeCycleStage(stageName);
        var previousStage = mod.getPreviousLifeCycleStage(stageName);
        var permissionPromoteToNextStage,permissionDemoteToNextStage;
        var isAuthorizeToPromote = false;
        var isAuthorizeToDemote = false;

        if(nextStage != null && nextStage != undefined) {
           permissionPromoteToNextStage = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStage;
            isAuthorizeToPromote = modPermission.isUserAccessGrantedForPlatform(permissionPromoteToNextStage);
        }
        if(previousStage != null || previousStage != undefined){
            permissionDemoteToNextStage = PERMISSION_GOVERNANCE_DEMOTE_TO + previousStage;
            isAuthorizeToDemote = modPermission.isUserAccessGrantedForPlatform(permissionDemoteToNextStage);
        }

        if(isAuthorizeToPromote || isAuthorizeToDemote){
            if ( currentStage != stageName){
                // check whether current stage and the stage user saw is the same.
                throw new Error("Unable to complete the governance operation. Application stage is already changed to : " +
                        currentStage);
            }

            var revision = '0';
            var build = 'true';
            var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;
            var aspect = LIFE_CYCLE_NAME;
            var promoteDepPolicy = getProperty('ApplicationDeployment.DeploymentStage.'+stageName+'.Promote.DeploymentPolicy');
            var deployAction;
            if(promoteDepPolicy == "Tagged" || promoteDepPolicy == "Latest") {
                deployAction = "promote";
            } else if (promoteDepPolicy == "Promoted") {
                deployAction = "rePromote";
            }

            permissionMod = jagg.module("permission");
            var user = permissionMod.checkUserAuthenticated();

            var parameters = new Array();
            parameters[0] = 'version';
            parameters[1] = version;
            parameters[2] = 'applicationId';
            parameters[3] = applicationKey;
            parameters[4] = 'revision';
            parameters[5] = 'HEAD';
            parameters[6] = 'stage';
            parameters[7] = stageName;
            parameters[8] = 'build';
            parameters[9] = 'true';
            parameters[10] = 'autodeployment';
            parameters[11] = 'false';
            parameters[12] = 'action';
            parameters[13] = action;
            parameters[14] = 'user';
            parameters[15] = user;
            if(comment){
                parameters[16] = 'comment';
                parameters[17] = comment;
            }

            try {
                var lifeCycleCheckListItems = parse(request.getParameter("checkItems"));
                var deployedArtifact = mod.invokeGovernanceProcess(action, stageName, applicationKey, revision, version,
                        build, path, aspect, deployAction, lifeCycleCheckListItems, parameters, tagName, userName);

                log.debug(applicationKey + " was successfully invoked " + action + " action");
            } catch (e) {
                throw new Error(e.message);
            }
        }  else {
            response.result = 0;
            response.message = "You don't have permission to perform the life cycle operation";
            print(response);
        }
	    

	} else if(action == "invokeDoVersion") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
        var srcVersion = request.getParameter("srcVersion");
        var targetVersion = request.getParameter("targetVersion");
        srcVersion = srcVersion.substring(srcVersion.indexOf("/") + 1);

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_REPOSITORY_BRANCH)){
            try {
                return mod.invokeDoVersion(applicationKey, srcVersion, targetVersion);
            } catch (e) {
                log.info(e.message);
                throw e.message;
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create a version";
            print(response);
        }

    } else if (action == "createArtifact") {
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var version = request.getParameter("version");
        var revision = request.getParameter("revision");
        var stage = request.getParameter("stage");
        var doDeploy = request.getParameter("doDeploy");
        var tagName = request.getParameter("tagName");
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try {
                return mod.invokeCreateArtifact(applicationKey, version, revision, stage, doDeploy, tagName);
            } catch (e) {
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create  artifacts";
            print(response);
        }

    } else if ( action == "invokeUpdateLifeCycleCheckList"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;
        var aspect = LIFE_CYCLE_NAME;
		var nextStageName = mod.getNextLifeCycleStage(stageName);
        var permissionStageToPromote = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStageName;
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToPromote)){
            try {
                var checkListItemsValues = parse(request.getParameter("checkItems"));
                var parameters = new Array();
                var deployedArtifact = mod.invokeAspectWithParameter(path, aspect, "itemClick", checkListItemsValues,
                        parameters,stageName);
            } catch (e) {
                throw new Error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create application repository";
            print(response);
        }

        
    } else if (action == "getAppVersionsInStagesWithLifeCycleInfo"){
       mod = jagg.module("lifecycle");
       var applicationKey = request.getParameter("applicationKey");
       var userName = request.getParameter("userName");
       var response = {};
       if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try{
                print(mod.getAppVersionsInStagesWithLifeCycleInfo(applicationKey,userName));
            }catch(e){
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to life cyclec info of application versions";
            print(response);
        }


    }else if ( action == "getLifecycleAction"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/'  + version;

        try {
            var deployedArtifact = mod.getLifecycleAction(path);
            print(deployedArtifact);
        } catch (e) {
            throw new Error(e.message);
        }

    }else if(action == "uploadNewVersionOfExistingApp"){
    	
    	var applicationMod = jagg.module("application");
    	var lifecycleMod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var timestamp = new Date().getTime();
    	var srcVersion = timestamp;
        var targetVersion = timestamp;
       
    	var file = request.getFile("uploaded_application");
    	    	
    	try {
			var mod = jagg.module("manager");
    		var projUtils = Packages.org.wso2.carbon.appfactory.utilities.project.ProjectUtils;
	    	var applicationType = projUtils.getApplicationType(applicationKey, mod.getTenantDomain());

    		applicationMod.stroreUploadedApplication(applicationKey + "-" + targetVersion , file, applicationType);
	        return lifecycleMod.invokeDoVersion(applicationKey, srcVersion, targetVersion);
	    } catch (e) {
	    	log.info(e.message);
		    throw e.message;
	    }
    	
    	
    }else if(action == "invokeDoFork") {
    	mod = jagg.module("lifecycle");

    	var applicationKey = request.getParameter("applicationKey");
        var parentRepoUrl = request.getParameter("parentRepoUrl");
        var userName = request.getParameter("userName");
        var type = request.getParameter("type");

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_REPOSITORY_FORK)){
            try {
                return mod.invokeDoFork(applicationKey, parentRepoUrl, userName, type);
            } catch (e) {
                log.info(e.message);
                throw e.message;
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to fork the repository";
            print(response);
        }

    }else {
		log.info("No action specified");
	}
}());

%>
