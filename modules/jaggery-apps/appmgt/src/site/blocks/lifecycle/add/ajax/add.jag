<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");

 	var log = new Log();
    var modPermission = jagg.module("permission");
    if(request.getParameter("stageName") != null){
        session.put('stage',request.getParameter("stageName"));
    }
    if(action == "updateSessionInfo"){
        //We do nothing here. But when we send the stage as a parameter for this, the above if condition will get hit
        //And it will update the session with the correct info.
        //Therefore don't remove this method
    }else if (action == "deployToStage") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
    	var revision = request.getParameter("revision");
    	var version = request.getParameter("version");
    	var stageName = request.getParameter("stageName");
    	var build = request.getParameter("build");
    	
        return mod.invokeDeployToStage(applicationKey,revision,version,stageName,build);
    } else if(action == "directdeploy") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var build = request.getParameter("build");

        var revision = "HEAD";
        var isDirectlyDeploy = getProperty('ApplicationDeployment.DeploymentStage.' + stageName + '.AllowDirectDeploy');
        var permissionStageToDeploy = PERMISSION_DEPLOY_TO + stageName;

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToDeploy)){
            if (isDirectlyDeploy == "true"){
                try{
                    mod.invokeDeployToStage(applicationKey,revision,version,stageName,build);
                } catch(e) {
                    throw new Error(e.message);
                }
            } else {
                log.debug("Artifact is not configured for direct deploy");
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to deploy";
            print(response);
        }
	    
    } else if(action == "Promote" || action == "Demote" || action == "Retire") {
		mod = jagg.module("lifecycle"); 
		var applicationKey = request.getParameter("applicationKey");
    	var stageName = request.getParameter("stageName");
    	var version = request.getParameter("version");
		var tagName = request.getParameter("tagName");
		var comment = request.getParameter("comment");
		var userName = request.getParameter("userName");

	    var applicationModule = jagg.module("application");
		var currentStage = applicationModule.getStage(applicationKey,version);

        var response = {};
        var nextStage = mod.getNextLifeCycleStage(stageName);
        var previousStage = mod.getPreviousLifeCycleStage(stageName);
        var permissionPromoteToNextStage,permissionDemoteToNextStage;
        var isAuthorizeToPromote = false;
        var isAuthorizeToDemote = false;

        if(nextStage != null && nextStage != undefined) {
           permissionPromoteToNextStage = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStage;
            isAuthorizeToPromote = modPermission.isUserAccessGrantedForPlatform(permissionPromoteToNextStage);
        }
        if(previousStage != null || previousStage != undefined){
            permissionDemoteToNextStage = PERMISSION_GOVERNANCE_DEMOTE_TO + previousStage;
            isAuthorizeToDemote = modPermission.isUserAccessGrantedForPlatform(permissionDemoteToNextStage);
        }

        if(isAuthorizeToPromote || isAuthorizeToDemote){
        	var appmod = jagg.module("application");
        	var buildInfo = JSON.parse(appmod.getBuildandDelpoyedStatus(applicationKey, version));

		if(!(buildInfo != null && buildInfo != undefined &&  buildInfo.buildStatus == "successful")){
			response.error = true;
            		response.message = "Cannot promote/demote because no successful build is available!";
            		print(response);
			return;	
		}else{
                    //do nothing
		}
        	
        	
            if ( currentStage != stageName){
                // check whether current stage and the stage user saw is the same.
                throw new Error("Unable to complete the governance operation. Application stage is already changed to : " +
                        currentStage);
            }

            var revision = '0';
            var build = 'true';
            var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;
            var aspect = LIFE_CYCLE_NAME;
            var promoteDepPolicy = getProperty('ApplicationDeployment.DeploymentStage.'+stageName+'.Promote.DeploymentPolicy');
            var deployAction;
            if(promoteDepPolicy == "Tagged" || promoteDepPolicy == "Latest") {
                deployAction = "promote";
            } else if (promoteDepPolicy == "Promoted") {
                deployAction = "rePromote";
            }

            permissionMod = jagg.module("permission");
            var user = permissionMod.checkUserAuthenticated();

            var parameters = new Array();
            parameters[0] = 'version';
            parameters[1] = version;
            parameters[2] = 'applicationId';
            parameters[3] = applicationKey;
            parameters[4] = 'revision';
            parameters[5] = 'HEAD';
            parameters[6] = 'stage';
            parameters[7] = stageName;
            parameters[8] = 'build';
            parameters[9] = 'true';
            parameters[10] = 'autodeployment';
            parameters[11] = 'false';
            parameters[12] = 'action';
            parameters[13] = action;
            parameters[14] = 'user';
            parameters[15] = user;
            if(comment){
                parameters[16] = 'comment';
                parameters[17] = comment;
            }

            try {
                var lifeCycleCheckListItems = parse(request.getParameter("checkItems"));
                var deployedArtifact = mod.invokeGovernanceProcess(action, stageName, applicationKey, revision, version,
                        build, path, aspect, deployAction, lifeCycleCheckListItems, parameters, tagName, userName);

                log.debug(applicationKey + " was successfully invoked " + action + " action");
                response.error = false;
        		response.message = "Promote/demote was successful.";
        		print(response);
            } catch (e) {
                throw new Error(e.message);
            }
        }  else {
            response.result = 0;
            response.message = "You don't have permission to perform the life cycle operation";
            print(response);
        }
	    

	} else if(action == "invokeDoVersion") {
    	mod = jagg.module("lifecycle");
    	
    	var applicationKey = request.getParameter("applicationKey");
        var srcVersion = request.getParameter("srcVersion");
        var targetVersion = request.getParameter("targetVersion");
        srcVersion = srcVersion.substring(srcVersion.indexOf("/") + 1);

        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_REPOSITORY_BRANCH)){
            try {
                return mod.invokeDoVersion(applicationKey, srcVersion, targetVersion);
            } catch (e) {
                log.error(e.message);
                throw e.message;
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create a version";
            print(response);
        }

    } else if (action == "createArtifact") {
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var version = request.getParameter("version");
        var revision = request.getParameter("revision");
        var stage = request.getParameter("stage");
        var doDeploy = request.getParameter("doDeploy");
        var tagName = request.getParameter("tagName");
        var repoFrom = request.getParameter("repoFrom");
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try {
                return mod.invokeCreateArtifact(applicationKey, version, revision, stage, doDeploy, tagName,repoFrom);
            } catch (e) {
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create  artifacts";
            print(response);
        }

    } else if ( action == "invokeUpdateLifeCycleCheckList"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/' + version;
        var aspect = LIFE_CYCLE_NAME;
		var nextStageName = mod.getNextLifeCycleStage(stageName);
        var permissionStageToPromote = PERMISSION_GOVERNANCE_PROMOTE_TO + nextStageName;
        var response = {};
        if (modPermission.isUserAccessGranted(applicationKey, permissionStageToPromote)){
            try {
                var checkListItemsValues = parse(request.getParameter("checkItems"));
                var parameters = new Array();
                var deployedArtifact = mod.invokeAspectWithParameter(path, aspect, "itemClick", checkListItemsValues,
                        parameters,stageName);
            } catch (e) {
                throw new Error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to create application repository";
            print(response);
        }

        
    } else if (action == "getAppVersionsInStagesWithLifeCycleInfo"){
       mod = jagg.module("lifecycle");
       var applicationKey = request.getParameter("applicationKey");
       var userName = request.getParameter("userName");
       var response = {};
       if (modPermission.isUserAccessGranted(applicationKey, PERMISSION_CONFIGURE_GOVERNANCE)){
            try{
                print(mod.getAppVersionsInStagesWithLifeCycleInfo(applicationKey,userName));
            }catch(e){
                log.error(e.message);
            }
        } else{
            response.result = 0;
            response.message = "You don't have permission to life cyclec info of application versions";
            print(response);
        }


    }else if ( action == "getLifecycleAction"){
        mod = jagg.module("lifecycle");
        var applicationKey = request.getParameter("applicationKey");
        var stageName = request.getParameter("stageName");
        var version = request.getParameter("version");
        var path = '/_system/governance' + '/repository/applications/' + applicationKey + '/'  + version;

        try {
            var deployedArtifact = mod.getLifecycleAction(path);
            print(deployedArtifact);
        } catch (e) {
            throw new Error(e.message);
        }

    }else if(action == "uploadNewVersionOfExistingApp"){
    	var applicationMod = jagg.module("application");
    	var lifecycleMod = jagg.module("lifecycle");
    	
    	var existingVersion = request.getParameter("latestVersion");//existing latest version
    	var major=Number(existingVersion.split(".")[0]);
    	var newMajor=++major;
	var newVersion=newMajor+".0.0";

	applicationKey = request.getParameter("applicationKey");
    	var userName = request.getParameter("userName");
    	var srcVersion = newVersion;//increment of version 
        var targetVersion = newVersion;
       
    	var file = request.getFile("uploaded_application");    	 

    	try {
			var mod = jagg.module("manager");
    		var projUtils = Packages.org.wso2.carbon.appfactory.utilities.project.ProjectUtils;
	    	var applicationType = projUtils.getApplicationType(applicationKey, mod.getTenantDomain());

    		applicationMod.stroreUploadedApplication(applicationKey + "-" + targetVersion , file, applicationType);
	        lifecycleMod.invokeDoVersion(applicationKey, srcVersion, targetVersion);
	        
	    	var revision = '0';
			var build = 'true';
			var version = targetVersion;
			var action = 'Promote';
			var revision= 'HEAD';
			var deployAction = 'promote';
			var path = '/_system/governance/repository/applications/' + applicationKey + '/' + version;
			var aspect = LIFE_CYCLE_NAME;

			var parameters = new Array();
			parameters[0] = 'version';
			parameters[1] = version;
			parameters[2] = 'applicationId';
			parameters[3] = applicationKey;
			parameters[4] = 'revision';
			parameters[5] = revision;
			parameters[6] = 'build';
			parameters[7] = build;
			parameters[8] = 'autodeployment';
			parameters[9] = 'false';
			parameters[10] = 'action';
			parameters[11] = action;
			parameters[12] = 'user';
			parameters[13] = userName;

            var stages = lifecycleMod.getAllLifeCycleStages();
			for(var index in stages){
				var stageName = stages[index];
				var targetStage = getProperty("ApplicationDeployment.DeploymentStage."+ stageName +".Promote.TargetStage");
                parameters[14] = 'stage';
                parameters[15] = stageName;

              if(targetStage != null){
                     var items = new Array();
                     var itemCount = lifecycleMod.getCheckItemsByPathWithSleep(path).length;
                     for (i = 0; i < itemCount; i++) {
                        items.push("true");
                     }
                     lifecycleMod.invokeAspectWithParameter(path, aspect, "itemClick", items, [],stageName);
                     lifecycleMod.invokeGovernanceProcess(action, stageName, applicationKey, revision, version,
									build, path, aspect, deployAction, items, parameters, "", userName);
               }
			}

		//print("<html><script>window.location.replace('/appmgt/site/pages/uploadedVersions.jag?applicationName=" + request.getParameter("applicationName") + "&applicationKey=" + request.getParameter("applicationKey") + "');</script><body></body></html>");

	    } catch (e) {
	    	log.error(e.message);
		    throw e.message;
	    }
    	
    	
    }else {
		log.error("No action specified");
	}
}());

%>
